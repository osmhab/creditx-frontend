import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import { OpenAI } from "openai";

dotenv.config();
const app = express();
const port = process.env.PORT || 5050;

app.use(cors());
app.use(express.json());

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

app.post("/api/estimation", async (req, res) => {
  try {
    const { formData: bien } = req.body;

    const prompt = `
Tu es un expert en financement hypoth√©caire en Suisse.
Estime les deux valeurs suivantes √† partir des donn√©es ci-dessous :
1. La valeur de march√© la plus r√©aliste en CHF
2. La valeur qu'une banque pourrait reconna√Ætre en CHF

Voici les donn√©es :
- Type de bien : ${bien.type || "non sp√©cifi√©"}
- Adresse : ${bien.adresseComplete || "non sp√©cifi√©e"}
- NPA Localit√© : ${bien.npaLocalite}
- Ann√©e de construction : ${bien.anneeConstruction || "non sp√©cifi√©e"}
- Ann√©e(s) de r√©novation : ${bien.anneeRenovation || "non sp√©cifi√©e"}
- Type de construction : ${bien.typeConstruction || "non sp√©cifi√©"}
- √âtat : ${bien.etat || "non sp√©cifi√©"}
- Orientation : non pr√©cis√©
- Type de construction : Construction traditionnelle
- Surface brute : ${bien.surfaceHabitable || 0} m¬≤
- Surface terrain : ${bien.surfaceTerrain || 0} m¬≤
- Surface jardin : ${bien.surfaceJardin || 0} m¬≤
- Surface terrasse/balcon : ${bien.surfaceBalcon || 0} m¬≤
- Nombre de pi√®ces : ${bien.nbPieces || 0}
- Nombre de salles d‚Äôeau : ${bien.nbSallesEau || 0}
- Type de chauffage : ${bien.chauffageType || "non sp√©cifi√©"}
- Distribution de chaleur : ${bien.chauffageDistribution || "non sp√©cifi√©e"}
- Nombre de places de parc int√©rieures : ${bien.placesInt || 0}
- Nombre de places de parc ext√©rieures : ${bien.placesExt || 0}
- Photovolta√Øque : non pr√©cis√©
- Solaires thermiques : non pr√©cis√©
- Certificats : non pr√©cis√©s

R√©ponds uniquement avec ce format JSON strict **sans aucun mot autour** :
{
  "valeurEstimeeMarche": 800000,
  "valeurEstimeeBanque": 760000
}
`;

    const estimations = [];

    for (let i = 0; i < 5; i++) {
      const completion = await openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          { role: "system", content: "Tu es un expert hypoth√©caire suisse." },
          { role: "user", content: prompt },
        ],
        temperature: 0.3,
      });

      const content = completion.choices?.[0]?.message?.content;
      console.log(`üîÅ Estimation ${i + 1} :`, content);

      try {
        const match = content.match(/\{[\s\S]*\}/);
        if (match) {
          const parsed = JSON.parse(match[0]);
          estimations.push(parsed);
        } else {
          console.error(`‚ùå Aucun bloc JSON valide dans :`, content);
        }
      } catch (err) {
        console.error(`‚ùå Erreur parsing JSON estimation ${i + 1} :`, content);
      }
    }

    if (estimations.length === 0) {
      throw new Error("Aucune estimation valide re√ßue.");
    }

    const moyenne = estimations.reduce(
      (acc, curr) => {
        acc.valeurEstimeeMarche += curr.valeurEstimeeMarche;
        acc.valeurEstimeeBanque += curr.valeurEstimeeBanque;
        return acc;
      },
      { valeurEstimeeMarche: 0, valeurEstimeeBanque: 0 }
    );

    const valeurEstimeeMarche = Math.round(moyenne.valeurEstimeeMarche / estimations.length);
    const valeurEstimeeBanque = Math.round(moyenne.valeurEstimeeBanque / estimations.length);

    res.json({ valeurEstimeeMarche, valeurEstimeeBanque });

  } catch (err) {
    console.error("‚ùå Erreur backend /api/estimation :", err);
    res.status(500).json({ error: "Erreur interne serveur estimation." });
  }
});

app.listen(port, () => {
  console.log(`‚úÖ Serveur backend actif sur http://localhost:${port}`);
});

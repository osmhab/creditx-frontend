import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import { OpenAI } from "openai";
import ocrRoute from "./routes/ocrRoute.js";
import { getPromptParType } from './getPromptParType.js'; // ajuste le chemin si besoin



dotenv.config();
const app = express();
const port = process.env.PORT || 5050;

app.use(cors());
app.use(express.json());

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

app.post("/api/estimation", async (req, res) => {
  try {
    const { formData: bien } = req.body;

    const variantes = [
  "Estime les montants comme un expert hypoth√©caire suisse ayant acc√®s aux ventes comparables.",
  "Base ton estimation sur les donn√©es que tu re√ßois et sur ta connaissance du march√© suisse.",
  "Sois pragmatique et donne une estimation en CHF m√™me si certaines donn√©es sont impr√©cises.",
  "R√©ponds avec des valeurs num√©riques r√©alistes en te basant sur des cas similaires.",
  "Ne refuse jamais d‚Äôestimer. Donne une valeur bas√©e sur ton exp√©rience simul√©e du march√© immobilier suisse."
];


    const makePrompt = (variante) => {
      return `
Tu es un expert en financement hypoth√©caire en Suisse.
Estime les deux valeurs suivantes √† partir des donn√©es ci-dessous :
1. La valeur de march√© la plus r√©aliste en CHF
2. La valeur qu'une banque pourrait reconna√Ætre en CHF

Voici les donn√©es :
- Type de bien : ${bien.type || "non sp√©cifi√©"}
- Adresse : ${bien.adresseComplete || "non sp√©cifi√©e"}
- NPA Localit√© : ${bien.npaLocalite || "non pr√©cis√©"}
- Ann√©e de construction : ${bien.anneeConstruction || "non sp√©cifi√©e"}
- Ann√©e(s) de r√©novation : ${bien.anneeRenovation || "non sp√©cifi√©e"}
- Type de construction : ${bien.typeConstruction || "non sp√©cifi√©"}
- √âtat : ${bien.etat || "non sp√©cifi√©"}
- Surface habitable : ${bien.surfaceHabitable > 0 ? `${bien.surfaceHabitable} m¬≤` : "non pr√©cis√©e"}
- Surface terrain : ${bien.surfaceTerrain > 0 ? `${bien.surfaceTerrain} m¬≤` : "non pr√©cis√©e"}
- Surface jardin : ${bien.surfaceJardin > 0 ? `${bien.surfaceJardin} m¬≤` : "non pr√©cis√©e"}
- Surface terrasse/balcon : ${bien.surfaceBalcon > 0 ? `${bien.surfaceBalcon} m¬≤` : "non pr√©cis√©e"}
- Nombre de pi√®ces : ${bien.nbPieces || "non pr√©cis√©"}
- Nombre de salles d‚Äôeau : ${bien.nbSallesEau || "non pr√©cis√©"}
- Type de chauffage : ${bien.chauffageType || "non sp√©cifi√©"}
- Distribution de chaleur : ${bien.chauffageDistribution || "non sp√©cifi√©e"}
- Places de parc int√©rieures : ${bien.placesInt || 0}
- Places de parc ext√©rieures : ${bien.placesExt || 0}
- Orientation : non pr√©cis√©e
- Photovolta√Øque : non pr√©cis√©
- Solaires thermiques : non pr√©cis√©
- Certificats : non pr√©cis√©s

${variante}

Tu dois toujours r√©pondre avec deux valeurs chiffr√©es, m√™me si certaines donn√©es sont manquantes ou impr√©cises.
R√©ponds uniquement avec ce format JSON strict, sans aucun mot autour, ni explication :


{
  "valeurEstimeeMarche": <nombre>,
  "valeurEstimeeBanque": <nombre>
}
`;
    };

    const estimations = [];

    for (let i = 0; i < 5; i++) {
      const variante = variantes[Math.floor(Math.random() * variantes.length)];
      const prompt = makePrompt(variante);

      const completion = await openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          { role: "system", content: "Tu es un expert hypoth√©caire suisse." },
          { role: "user", content: prompt },
        ],
        temperature: 0.3 + Math.random() * 0.2, // entre 0.3 et 0.5
      });

      const content = completion.choices?.[0]?.message?.content;
      console.log(`üîÅ Estimation ${i + 1} :`, content);

      try {
        const match = content.match(/\{[\s\S]*\}/);
        if (match) {
          const parsed = JSON.parse(match[0]);
          estimations.push(parsed);
        } else {
          console.error(`‚ùå Aucun bloc JSON valide dans :`, content);
        }
      } catch (err) {
        console.error(`‚ùå Erreur parsing JSON estimation ${i + 1} :`, content);
      }
    }

    if (estimations.length === 0) {
      throw new Error("Aucune estimation valide re√ßue.");
    }

    const moyenne = estimations.reduce(
      (acc, curr) => {
        acc.valeurEstimeeMarche += curr.valeurEstimeeMarche;
        acc.valeurEstimeeBanque += curr.valeurEstimeeBanque;
        return acc;
      },
      { valeurEstimeeMarche: 0, valeurEstimeeBanque: 0 }
    );

    const valeurEstimeeMarche = Math.round(moyenne.valeurEstimeeMarche / estimations.length);
    const valeurEstimeeBanque = Math.round(moyenne.valeurEstimeeBanque / estimations.length);

    res.json({ valeurEstimeeMarche, valeurEstimeeBanque });

  } catch (err) {
    console.error("‚ùå Erreur backend /api/estimation :", err);
    res.status(500).json({ error: "Erreur interne serveur estimation." });
  }
});


app.use(ocrRoute);



app.post("/api/analyse-document", async (req, res) => {
  try {
    const { texte, formData, typeAttendu } = req.body;

    if (!texte || !typeAttendu || !formData) {
      return res.status(400).json({ error: "Donn√©es manquantes dans la requ√™te" });
    }

    const prompt = getPromptParType(typeAttendu, texte, formData);

    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      temperature: 0.3,
      messages: [
        { role: "system", content: "Tu es un assistant expert en documents financiers suisses." },
        { role: "user", content: prompt },
      ],
    });

    const raw = completion.choices?.[0]?.message?.content || "";
    console.log("üß† R√©ponse GPT brute :", raw);

    const match = raw.match(/\{[\s\S]*\}/);
    const json = match ? JSON.parse(match[0]) : null;

    if (!json) throw new Error("R√©ponse invalide de GPT");

    res.json(json);
  } catch (error) {
    console.error("‚ùå Erreur analyse document :", error);
    res.status(500).json({ error: "Erreur dans l'analyse du document." });
  }
});



// üëá Ce bloc doit rester √† la toute fin
app.listen(port, () => {
  console.log(`‚úÖ Serveur backend actif sur http://localhost:${port}`);
});

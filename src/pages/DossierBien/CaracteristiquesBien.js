// src/DossierBien/CaracteristiquesBien.js
import React, { useEffect, useMemo, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { doc, getDoc, updateDoc } from "firebase/firestore";
import { db } from "../../firebase-config";
import TuneOutlinedIcon from "@mui/icons-material/TuneOutlined";
import SelecteurCreditX from "../../components/SelecteurCreditX";
import ModalMessage from "../../components/ModalMessage";
import BlocExemple from "../../components/BlocExemple";
import { Typography, Tooltip, IconButton } from "@mui/material";
import InfoOutlinedIcon from "@mui/icons-material/InfoOutlined";
import DeleteOutlineOutlinedIcon from "@mui/icons-material/DeleteOutlineOutlined";

export default function CaracteristiquesBien() {
  const navigate = useNavigate();
  const { id } = useParams();

  const [typeBien, setTypeBien] = useState(null); // affichage conditionnel

  // ===== Surfaces
  const [surfaceHabitableBrute, setSurfaceHabitableBrute] = useState("");
  const [surfaceHabitableNette, setSurfaceHabitableNette] = useState("");
  const [surfacePonderee, setSurfacePonderee] = useState("");

  // ===== Pi√®ces
  const [nbPieces, setNbPieces] = useState("");
  const [nbChambres, setNbChambres] = useState("");

  // ===== Etages / ascenseur
  const [etage, setEtage] = useState("");
  const [etagesImmeuble, setEtagesImmeuble] = useState("");
  const [ascenseur, setAscenseur] = useState(null); // true/false

  // ===== Parkings
  const [parkInt, setParkInt] = useState("");
  const [parkExt, setParkExt] = useState("");
  const [parkInclus, setParkInclus] = useState(null);

  // ===== Nouveaut√©s
  const [panneauxSolaires, setPanneauxSolaires] = useState(null); // true/false
  const [garagesBox, setGaragesBox] = useState(""); // nombre de box/garages
  const [surfaceTerrain, setSurfaceTerrain] = useState(""); // m¬≤

  // ===== Etat / chauffage
  const [etatGeneral, setEtatGeneral] = useState(null);
  const [chauffage, setChauffage] = useState(null);
  const [anneeChauffage, setAnneeChauffage] = useState("");

  // ===== Cuisine / SDB
  const [amenagementCuisine, setAmenagementCuisine] = useState(null);
  const [coutMoyenSdb, setCoutMoyenSdb] = useState(null);

  // Liste dynamique des salles de bain (chaque item a un "type")
  // Valeurs possibles: "familiale" | "standard" | "wc_invite"
  const [sallesDeBain, setSallesDeBain] = useState([]); // ex: [{type:"standard"}, {type:"wc_invite"}]

  // ===== UI state
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);

  // Modals
  const [openModalPonderee, setOpenModalPonderee] = useState(false);
  const [openModalBrute, setOpenModalBrute] = useState(false);
  const [openModalNette, setOpenModalNette] = useState(false);
  const [openModalEtages, setOpenModalEtages] = useState(false);
  const [openModalSolaires, setOpenModalSolaires] = useState(false);

  // üîµ Nouveau : un seul modal pour les d√©finitions SDB
  const [openModalSdbDefs, setOpenModalSdbDefs] = useState(false);

  // helpers
  const toIntOrNull = (v) => {
    if (v === "" || v === null || v === undefined) return null;
    const n = Number(String(v).replace(",", "."));
    return Number.isFinite(n) ? Math.trunc(n) : null;
  };
  const toFloatOrNull = (v) => {
    if (v === "" || v === null || v === undefined) return null;
    const n = Number(String(v).replace(",", "."));
    return Number.isFinite(n) ? n : null;
  };

  // ===== chargement
  useEffect(() => {
    let mounted = true;
    (async () => {
      try {
        const snap = await getDoc(doc(db, "demandes", id));
        if (!snap.exists() || !mounted) return;
        const data = snap.data() || {};
        const bien = data.bien || {};

        setTypeBien(bien.typeBien || null);

        setSurfaceHabitableBrute(bien.surfaceHabitableBrute ?? "");
        setSurfaceHabitableNette(bien.surfaceHabitableNette ?? "");
        // r√©tro‚Äëcompat : si anciens dossiers n‚Äôont que "surfaceHabitable", on le met en brute
        if (!bien.surfaceHabitableBrute && bien.surfaceHabitable) {
          setSurfaceHabitableBrute(bien.surfaceHabitable);
        }
        setSurfacePonderee(bien.surfacePonderee ?? "");

        setNbPieces(bien.nbPieces ?? "");
        setNbChambres(bien.nbChambres ?? "");

        setEtage(bien.etage ?? "");
        setEtagesImmeuble(bien.etagesImmeuble ?? "");
        setAscenseur(typeof bien.ascenseur === "boolean" ? bien.ascenseur : null);

        setParkInt(bien.parkings?.interieur ?? "");
        setParkExt(bien.parkings?.exterieur ?? "");
        setParkInclus(
          typeof bien.parkings?.inclusDansPrix === "boolean" ? bien.parkings.inclusDansPrix : null
        );

        // nouveaut√©s
        setPanneauxSolaires(
          typeof bien.panneauxSolaires === "boolean" ? bien.panneauxSolaires : null
        );
        setGaragesBox(bien.garagesBox ?? "");
        setSurfaceTerrain(bien.surfaceTerrain ?? "");

        setEtatGeneral(bien.etatGeneral ?? null);
        setChauffage(bien.chauffage ?? null);
        setAnneeChauffage(bien.anneeChauffage ?? "");

        setAmenagementCuisine(bien.amenagementCuisine ?? null);
        setCoutMoyenSdb(bien.coutMoyenSdb ?? null);

        // salles de bain
        const arr = Array.isArray(bien.sallesDeBain)
          ? bien.sallesDeBain
          : (bien.sallesDeBainTypes || []); // support √©ventuel ancien nom
        if (Array.isArray(arr) && arr.length > 0) {
          setSallesDeBain(arr.map((t) => ({ type: t })));
        } else {
          const details = bien.detailsSdb || {};
          const f = Math.max(0, details.familiale || 0);
          const s = Math.max(0, details.standard || 0);
          const w = Math.max(0, details.wcInvite || 0);
          const rebuilt = [
            ...Array(f).fill({ type: "familiale" }),
            ...Array(s).fill({ type: "standard" }),
            ...Array(w).fill({ type: "wc_invite" }),
          ];
          setSallesDeBain(rebuilt);
        }
      } catch (e) {
        console.error("Erreur chargement caract√©ristiques :", e);
      } finally {
        if (mounted) setLoading(false);
      }
    })();
    return () => { mounted = false; };
  }, [id]);

  // ===== options
  const etatOptions = useMemo(
    () => [
      { value: "neuf", label: "Neuf / r√©cent" },
      { value: "tres_bon", label: "Tr√®s bon" },
      { value: "bon", label: "Bon" },
      { value: "travaux", label: "Travaux √† pr√©voir" },
    ],
    []
  );

  const chauffageOptions = useMemo(
    () => [
      { value: "pompe_a_chaleur", label: "Pompe √† chaleur" },
      { value: "gaz", label: "Gaz" },
      { value: "mazout", label: "Mazout" },
      { value: "reseau_chaleur", label: "R√©seau de chaleur" },
      { value: "electrique", label: "√âlectrique" },
      { value: "autre", label: "Autre" },
    ],
    []
  );

  const boolOptions = [
    { value: true, label: "Oui" },
    { value: false, label: "Non" },
  ];

  const cuisineOptions = useMemo(
    () => [
      { value: "simple", label: "Simple (‚â§ 20‚Äô000)" },
      { value: "standard", label: "Standard (20‚Äô000‚Äì40‚Äô000)" },
      { value: "haut_gamme", label: "Haut de gamme (40‚Äô000‚Äì60‚Äô000)" },
      { value: "premium", label: "Premium (> 60‚Äô000)" },
    ],
    []
  );

  const coutSdbOptions = useMemo(
    () => [
      { value: "simple", label: "Simple (‚â§ 10‚Äô000)" },
      { value: "standard", label: "Standard (10‚Äô000‚Äì30‚Äô000)" },
      { value: "haut_gamme", label: "Haut de gamme (30‚Äô000‚Äì50‚Äô000)" },
      { value: "premium", label: "Premium (> 50‚Äô000)" },
    ],
    []
  );

  const sdbTypeOptions = useMemo(
    () => [
      { value: "familiale", label: "Familiale" },
      { value: "standard", label: "Standard" },
      { value: "wc_invite", label: "WC invit√©" },
    ],
    []
  );

  // ===== validation ‚Äî au moins brute OU nette, sinon autres fallback (pond√©r√©e ou pi√®ces+chambres)
  const baseOk =
    (toFloatOrNull(surfaceHabitableBrute) > 0 ||
      toFloatOrNull(surfaceHabitableNette) > 0) ||
    toFloatOrNull(surfacePonderee) > 0 ||
    (toFloatOrNull(nbPieces) > 0 && toIntOrNull(nbChambres) > 0);

  const valid = baseOk;

  // ===== d√©riv√©s salles de bain
  const counts = sallesDeBain.reduce(
    (acc, it) => {
      if (it?.type === "familiale") acc.familiale += 1;
      else if (it?.type === "standard") acc.standard += 1;
      else if (it?.type === "wc_invite") acc.wcInvite += 1;
      return acc;
    },
    { familiale: 0, standard: 0, wcInvite: 0 }
  );
  const totalSdb = sallesDeBain.length;

  // ===== handlers SDB
  const addSalleDeBain = () => {
    setSallesDeBain((prev) => [...prev, { type: "standard" }]);
  };
  const updateSalleDeBain = (index, newType) => {
    setSallesDeBain((prev) =>
      prev.map((it, i) => (i === index ? { ...it, type: newType } : it))
    );
  };
  const removeSalleDeBain = (index) => {
    setSallesDeBain((prev) => prev.filter((_, i) => i !== index));
  };

  // ===== save
  const handleSave = async () => {
    if (!valid) return;
    setSaving(true);
    try {
      const ref = doc(db, "demandes", id);
      const snap = await getDoc(ref);
      const data = snap.data() || {};
      const bien = { ...(data.bien || {}) };

      // surfaces
      bien.surfaceHabitableBrute = toFloatOrNull(surfaceHabitableBrute);
      bien.surfaceHabitableNette = toFloatOrNull(surfaceHabitableNette);
      bien.surfacePonderee = toFloatOrNull(surfacePonderee);

      // r√©tro‚Äëcompat : "surfaceHabitable" = meilleure dispo (nette > brute)
      const fallbackHab =
        toFloatOrNull(surfaceHabitableNette) ??
        toFloatOrNull(surfaceHabitableBrute) ??
        null;
      bien.surfaceHabitable = fallbackHab;

      // pi√®ces
      bien.nbPieces = toFloatOrNull(nbPieces);
      bien.nbChambres = toIntOrNull(nbChambres);

      // sp√©cifique immeuble/appartement
      bien.etage = toIntOrNull(etage);
      bien.etagesImmeuble = toIntOrNull(etagesImmeuble);
      if (ascenseur !== null) bien.ascenseur = ascenseur;

      // parkings
      bien.parkings = {
        interieur: toIntOrNull(parkInt),
        exterieur: toIntOrNull(parkExt),
        inclusDansPrix: parkInclus === null ? null : parkInclus,
      };

      // nouveaut√©s
      bien.panneauxSolaires = panneauxSolaires === null ? null : panneauxSolaires;
      bien.garagesBox = toIntOrNull(garagesBox);
      bien.surfaceTerrain = toFloatOrNull(surfaceTerrain);

      // √©tat / chauffage
      bien.etatGeneral = etatGeneral || null;
      bien.chauffage = chauffage || null;
      bien.anneeChauffage = toIntOrNull(anneeChauffage);

      // cuisine / sdb
      bien.amenagementCuisine = amenagementCuisine || null;
      bien.coutMoyenSdb = coutMoyenSdb || null;

      // sdb
      const typesArray = sallesDeBain.map((it) => it.type);
      bien.sallesDeBain = typesArray;
      bien.detailsSdb = { ...counts };
      bien.nbSdb = totalSdb;

      // rappel : ensoleillement / orientation / standing restent null (√©valu√©s plus tard par IA)

      await updateDoc(ref, { bien });
      navigate(`/bien/${id}`);
    } catch (e) {
      console.error("Erreur sauvegarde caract√©ristiques :", e);
      alert("Impossible d‚Äôenregistrer. R√©essaie.");
    } finally {
      setSaving(false);
    }
  };

  if (loading) return <div className="p-6 text-base lg:text-sm">Chargement...</div>;

  const isAppartement = typeBien === "appartement";

  // Helpers UI pour inputs num√©riques (clavier num√©rique)
  const numPropsInt = { inputMode: "numeric", pattern: "[0-9]*" };
  const numPropsDec = { inputMode: "decimal", pattern: "[0-9]*[.,]?[0-9]*" };

  return (
    <div className="min-h-screen bg-[#FCFCFC] flex justify-center px-4 pt-6">
      <div className="w-full max-w-md">
        <button onClick={() => navigate(`/bien/${id}`)} className="mb-4">
          <span className="text-xl">‚Üê</span>
        </button>

        <div className="flex items-center gap-3 mb-4">
          <div className="w-9 h-9 rounded-full bg-creditxblue text-white flex items-center justify-center">
            <TuneOutlinedIcon fontSize="small" />
          </div>
          <h1 className="text-xl font-semibold">Caract√©ristiques principales</h1>
        </div>

        <div className="bg-white rounded-2xl p-4 space-y-6">
          {/* Surfaces */}
          <div className="space-y-3">
            <div>
              <label className="block text-sm mb-1">
                <span className="flex items-center gap-1">
                  Surface habitable brute (m¬≤) <span className="text-red-500">*</span>
                  <Tooltip title="Qu‚Äôest-ce que la surface brute ?">
                    <IconButton
                      size="small"
                      onClick={() => setOpenModalBrute(true)}
                      sx={{ color: "#0047FF", p: 0.5 }}
                    >
                      <InfoOutlinedIcon fontSize="inherit" />
                    </IconButton>
                  </Tooltip>
                </span>
              </label>
              <input
                type="text"
                {...numPropsDec}
                value={surfaceHabitableBrute}
                onChange={(e) => setSurfaceHabitableBrute(e.target.value)}
                className="w-full rounded-xl border border-gray-200 px-3 py-2 text-sm outline-none"
              />
            </div>

            <div>
              <label className="block text-sm mb-1">
                <span className="flex items-center gap-1">
                  Surface habitable nette (m¬≤)
                  <Tooltip title="Qu‚Äôest-ce que la surface nette ?">
                    <IconButton
                      size="small"
                      onClick={() => setOpenModalNette(true)}
                      sx={{ color: "#0047FF", p: 0.5 }}
                    >
                      <InfoOutlinedIcon fontSize="inherit" />
                    </IconButton>
                  </Tooltip>
                </span>
              </label>
              <input
                type="text"
                {...numPropsDec}
                value={surfaceHabitableNette}
                onChange={(e) => setSurfaceHabitableNette(e.target.value)}
                className="w-full rounded-xl border border-gray-200 px-3 py-2 text-sm outline-none"
              />
              {!(toFloatOrNull(surfaceHabitableBrute) > 0 || toFloatOrNull(surfaceHabitableNette) > 0) && (
                <p className="text-xs text-amber-600 mt-1">
                  Indique au moins la surface <b>brute</b> ou la surface <b>nette</b>.
                </p>
              )}
            </div>

            <div>
              <label className="block text-sm mb-1">
                <span className="flex items-center gap-1">
                  Surface pond√©r√©e (m¬≤)
                  <Tooltip title="Qu‚Äôest-ce que la surface pond√©r√©e ?">
                    <IconButton
                      size="small"
                      onClick={() => setOpenModalPonderee(true)}
                      sx={{ color: "#0047FF", p: 0.5 }}
                    >
                      <InfoOutlinedIcon fontSize="inherit" />
                    </IconButton>
                  </Tooltip>
                </span>
              </label>
              <input
                type="text"
                {...numPropsDec}
                value={surfacePonderee}
                onChange={(e) => setSurfacePonderee(e.target.value)}
                className="w-full rounded-xl border border-gray-200 px-3 py-2 text-sm outline-none"
              />
            </div>
          </div>

          {/* Pi√®ces */}
          <div className="grid grid-cols-2 gap-3">
            <div>
              <label className="block text-sm mb-1">Pi√®ces</label>
              <input
                type="text"
                {...numPropsDec}
                value={nbPieces}
                onChange={(e) => setNbPieces(e.target.value)}
                className="w-full rounded-xl border border-gray-200 px-3 py-2 text-sm outline-none"
              />
            </div>
            <div>
              <label className="block text-sm mb-1">Chambres</label>
              <input
                type="text"
                {...numPropsInt}
                value={nbChambres}
                onChange={(e) => setNbChambres(e.target.value)}
                className="w-full rounded-xl border border-gray-200 px-3 py-2 text-sm outline-none"
              />
            </div>
          </div>

          {/* √âtage (appartement) + Nb √©tages immeuble (toujours) */}
          {isAppartement && (
            <div className="grid grid-cols-2 gap-3">
              <div>
                <label className="block text-sm mb-1">√âtage</label>
                <input
                  type="text"
                  {...numPropsInt}
                  value={etage}
                  onChange={(e) => setEtage(e.target.value)}
                  className="w-full rounded-xl border border-gray-200 px-3 py-2 text-sm outline-none"
                />
              </div>
              <div>
                <label className="block text-sm mb-1">
                  <span className="flex items-center gap-1">
                    Nb √©tages immeuble
                    <Tooltip title="Important">
                      <IconButton
                        size="small"
                        onClick={() => setOpenModalEtages(true)}
                        sx={{ color: "#0047FF", p: 0.5 }}
                      >
                        <InfoOutlinedIcon fontSize="inherit" />
                      </IconButton>
                    </Tooltip>
                  </span>
                </label>
                <input
                  type="text"
                  {...numPropsInt}
                  value={etagesImmeuble}
                  onChange={(e) => setEtagesImmeuble(e.target.value)}
                  className="w-full rounded-xl border border-gray-200 px-3 py-2 text-sm outline-none"
                />
              </div>
            </div>
          )}

          {!isAppartement && (
            <div>
              <label className="block text-sm mb-1">
                <span className="flex items-center gap-1">
                  Nb √©tages immeuble (m√™me pour une maison)
                  <Tooltip title="Important">
                    <IconButton
                      size="small"
                      onClick={() => setOpenModalEtages(true)}
                      sx={{ color: "#0047FF", p: 0.5 }}
                    >
                      <InfoOutlinedIcon fontSize="inherit" />
                    </IconButton>
                  </Tooltip>
                </span>
              </label>
              <input
                type="text"
                {...numPropsInt}
                value={etagesImmeuble}
                onChange={(e) => setEtagesImmeuble(e.target.value)}
                className="w-full rounded-xl border border-gray-200 px-3 py-2 text-sm outline-none"
              />
            </div>
          )}

          {isAppartement && (
            <SelecteurCreditX
              label="Ascenseur"
              value={ascenseur}
              onChange={setAscenseur}
              options={boolOptions}
              placeholder="S√©lectionner"
              searchable={false}
              clearable
            />
          )}

          {/* Nouveaut√©s */}
          <SelecteurCreditX
            label="Panneaux solaires"
            value={panneauxSolaires}
            onChange={setPanneauxSolaires}
            options={boolOptions}
            placeholder="Oui / Non"
            searchable={false}
            clearable
          />
          <div>
            <label className="block text-sm mb-1">
              <span className="flex items-center gap-1">
                Garage / box (nombre)
                <Tooltip title="Nombre de garages ferm√©s ou box.">
                  <IconButton
                    size="small"
                    onClick={() => {}}
                    sx={{ color: "#0047FF", p: 0.5 }}
                  >
                    <InfoOutlinedIcon fontSize="inherit" />
                  </IconButton>
                </Tooltip>
              </span>
            </label>
            <input
              type="text"
              {...numPropsInt}
              value={garagesBox}
              onChange={(e) => setGaragesBox(e.target.value)}
              className="w-full rounded-xl border border-gray-200 px-3 py-2 text-sm outline-none"
            />
          </div>

          <div>
            <label className="block text-sm mb-1">
              <span className="flex items-center gap-1">
                Surface du terrain (m¬≤)
                <Tooltip title="Surface cadastrale du terrain.">
                  <IconButton
                    size="small"
                    onClick={() => {}}
                    sx={{ color: "#0047FF", p: 0.5 }}
                  >
                    <InfoOutlinedIcon fontSize="inherit" />
                  </IconButton>
                </Tooltip>
              </span>
            </label>
            <input
              type="text"
              {...numPropsDec}
              value={surfaceTerrain}
              onChange={(e) => setSurfaceTerrain(e.target.value)}
              className="w-full rounded-xl border border-gray-200 px-3 py-2 text-sm outline-none"
            />
          </div>

          {/* Cuisine / Co√ªt SDB */}
          <SelecteurCreditX
            label="Am√©nagement de la cuisine"
            value={amenagementCuisine}
            onChange={setAmenagementCuisine}
            options={cuisineOptions}
            placeholder="S√©lectionner"
            searchable={false}
            clearable
          />
          <SelecteurCreditX
            label="Co√ªt moyen des salles de bain"
            value={coutMoyenSdb}
            onChange={setCoutMoyenSdb}
            options={coutSdbOptions}
            placeholder="S√©lectionner"
            searchable={false}
            clearable
          />

          {/* Liste dynamique ‚Äî Pr√©cision par salle de bain */}
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-1">
                <h2 className="text-sm font-medium">Pr√©cision par salle de bain</h2>
                {/* üîµ Bouton i unique qui ouvre le modal regroup√© */}
                <Tooltip title="D√©finitions des types de salle de bain">
                  <IconButton
                    size="small"
                    onClick={() => setOpenModalSdbDefs(true)}
                    sx={{ color: "#0047FF", p: 0.5 }}
                  >
                    <InfoOutlinedIcon fontSize="inherit" />
                  </IconButton>
                </Tooltip>
              </div>
              <div className="text-xs text-gray-500">
                Total: <span className="font-medium">{totalSdb}</span> ‚Ä¢ Familiale {counts.familiale} ‚Ä¢ Standard {counts.standard} ‚Ä¢ WC invit√© {counts.wcInvite}
              </div>
            </div>

            {sallesDeBain.length === 0 && (
              <p className="text-sm text-gray-500">Aucune salle de bain ajout√©e pour l‚Äôinstant.</p>
            )}

            <div className="space-y-2">
              {sallesDeBain.map((item, idx) => (
                <div key={idx} className="flex items-center gap-2">
                  <div className="flex-1">
                    <SelecteurCreditX
                      label={`Salle de bain ${idx + 1}`}
                      value={item.type}
                      onChange={(v) => updateSalleDeBain(idx, v)}
                      options={sdbTypeOptions}
                      placeholder="Choisir le type"
                      searchable={false}
                      clearable={false}
                    />
                  </div>
                  <Tooltip title="Supprimer">
                    <IconButton
                      onClick={() => removeSalleDeBain(idx)}
                      size="small"
                      sx={{ color: "#ef4444" }}
                    >
                      <DeleteOutlineOutlinedIcon fontSize="small" />
                    </IconButton>
                  </Tooltip>
                  {/* ‚úÖ plus d'ic√¥nes d'info par ligne */}
                </div>
              ))}
            </div>

            <button
              type="button"
              onClick={addSalleDeBain}
              className="w-full mt-1 px-3 py-2 rounded-xl border border-dashed border-gray-300 text-sm hover:bg-gray-50"
            >
              + Ajouter une salle de bain
            </button>
          </div>

          {/* Parkings */}
          <div className="grid grid-cols-3 gap-3">
            <div>
              <label className="block text-sm mb-1">Parking int.</label>
              <input
                type="text"
                {...numPropsInt}
                value={parkInt}
                onChange={(e) => setParkInt(e.target.value)}
                className="w-full rounded-xl border border-gray-200 px-3 py-2 text-sm outline-none"
              />
            </div>
            <div>
              <label className="block text-sm mb-1">Parking ext.</label>
              <input
                type="text"
                {...numPropsInt}
                value={parkExt}
                onChange={(e) => setParkExt(e.target.value)}
                className="w-full rounded-xl border border-gray-200 px-3 py-2 text-sm outline-none"
              />
            </div>
            <div>
              <label className="block text-sm mb-1">Inclus dans le prix ?</label>
              <SelecteurCreditX
                value={parkInclus}
                onChange={setParkInclus}
                options={boolOptions}
                placeholder="Oui / Non"
                searchable={false}
                clearable
              />
            </div>
          </div>

          {/* √âtat et chauffage */}
          <SelecteurCreditX
            label="√âtat g√©n√©ral"
            value={etatGeneral}
            onChange={setEtatGeneral}
            options={etatOptions}
            placeholder="S√©lectionner l‚Äô√©tat"
            searchable={false}
            clearable
          />
          <div className="grid grid-cols-2 gap-3">
            <SelecteurCreditX
              label="Type de chauffage"
              value={chauffage}
              onChange={setChauffage}
              options={chauffageOptions}
              placeholder="S√©lectionner"
              searchable
              clearable
            />
            <div>
              <label className="block text-sm mb-1">Ann√©e chauffage</label>
              <input
                type="text"
                {...numPropsInt}
                value={anneeChauffage}
                onChange={(e) => setAnneeChauffage(e.target.value)}
                className="w-full rounded-xl border border-gray-200 px-3 py-2 text-sm outline-none"
              />
            </div>
          </div>

          {/* Actions */}
          <div className="flex items-center gap-3 pt-2">
            <button
              type="button"
              onClick={() => navigate(`/bien/${id}`)}
              className="px-4 py-2 rounded-xl border border-gray-300 text-gray-700"
            >
              Annuler
            </button>
            <button
              type="button"
              onClick={handleSave}
              disabled={!valid || saving}
              className={`px-4 py-2 rounded-xl text-white ${
                valid && !saving ? "bg-black hover:bg-gray-900" : "bg-gray-300 cursor-not-allowed"
              }`}
            >
              {saving ? "Enregistrement..." : "Continuer"}
            </button>
          </div>
        </div>

        {/* ===== Modals */}
        <ModalMessage
          open={openModalBrute}
          onClose={() => setOpenModalBrute(false)}
          onConfirm={() => setOpenModalBrute(false)}
          title="Surface habitable brute ‚Äî explication"
          message={
            <>
              <Typography variant="body1" sx={{ mb: 2 }}>
                La <strong>surface habitable brute</strong> est la surface totale de l‚Äôappartement
                ou de la maison, avant toute d√©duction (incluant cloisons, murs int√©rieurs,
                gaines techniques).
              </Typography>
              <BlocExemple>
                <em>Exemple :</em><br />
                Appartement au sol : 120 m¬≤<br />
                Surface brute = <strong>120 m¬≤</strong>
              </BlocExemple>
            </>
          }
          confirmText="Compris"
          onlyConfirm
          showCloseIcon
          iconType="knowledge"
        />

        <ModalMessage
          open={openModalNette}
          onClose={() => setOpenModalNette(false)}
          onConfirm={() => setOpenModalNette(false)}
          title="Surface habitable nette ‚Äî explication"
          message={
            <>
              <Typography variant="body1" sx={{ mb: 2 }}>
                La <strong>surface habitable nette</strong> correspond √† la surface brute diminu√©e
                des zones non utilisables (murs porteurs, cloisons √©paisses, gaines techniques).
              </Typography>
              <BlocExemple>
                <em>Exemple :</em><br />
                Surface brute : 120 m¬≤<br />
                Murs + gaines : 15 m¬≤<br />
                Surface nette ‚âà <strong>105 m¬≤</strong>
              </BlocExemple>
            </>
          }
          confirmText="Compris"
          onlyConfirm
          showCloseIcon
          iconType="knowledge"
        />

        <ModalMessage
          open={openModalPonderee}
          onClose={() => setOpenModalPonderee(false)}
          onConfirm={() => setOpenModalPonderee(false)}
          title="Surface pond√©r√©e ‚Äî explication"
          message={
            <>
              <Typography variant="body1" sx={{ mb: 2 }}>
                La <strong>surface pond√©r√©e</strong> est une surface ‚Äúcorrig√©e‚Äù utilis√©e par
                les banques et les experts pour l‚Äô√©valuation. Elle additionne la surface
                habitable avec certaines surfaces annexes en leur appliquant des coefficients
                (ex. balcon, terrasse, cave, combles, etc.).
              </Typography>
              <BlocExemple>
                <em>Exemple :</em><br />
                Habitable : 100 m¬≤<br />
                Balcon : 20 m¬≤ (coeff. 50 % ‚Üí 10)<br />
                Cave : 10 m¬≤ (coeff. 25 % ‚Üí 2.5)<br />
                <strong>Total pond√©r√© ‚âà 112.5 m¬≤</strong>
              </BlocExemple>
              <Typography
                variant="caption"
                sx={{ display: "block", color: "#6b7280", fontStyle: "italic" }}
              >
                Si vous ne l‚Äôavez pas, laissez le champ vide ‚Äî nous pourrons l‚Äôestimer plus tard.
              </Typography>
            </>
          }
          confirmText="Compris"
          onlyConfirm
          showCloseIcon
          iconType="knowledge"
        />

        <ModalMessage
          open={openModalEtages}
          onClose={() => setOpenModalEtages(false)}
          onConfirm={() => setOpenModalEtages(false)}
          title="Nombre d‚Äô√©tages de l‚Äôimmeuble"
          message={
            <Typography variant="body1">
              <strong>Ne pas compter le rez‚Äëde‚Äëchauss√©e.</strong> Indiquez uniquement les √©tages
              sup√©rieurs (ex. 1er, 2e, 3e...). Si l‚Äôimmeuble a 4 niveaux au‚Äëdessus du rez,
              entrez <strong>4</strong>.
            </Typography>
          }
          confirmText="Compris"
          onlyConfirm
          showCloseIcon
          iconType="knowledge"
        />

        {/* üîµ Modal unique ‚Äî D√©finitions des SDB */}
        <ModalMessage
          open={openModalSdbDefs}
          onClose={() => setOpenModalSdbDefs(false)}
          onConfirm={() => setOpenModalSdbDefs(false)}
          title="D√©finitions ‚Äî salles de bain"
          message={
            <div className="space-y-3">
              <Typography variant="body1">
                <strong>Familiale</strong> : baignoire <em>et</em> cabine de douche + lavabo + WC.
              </Typography>
              <Typography variant="body1">
                <strong>Standard</strong> : baignoire <em>ou</em> douche + lavabo + WC.
              </Typography>
              <Typography variant="body1">
                <strong>WC invit√©</strong> : lavabo + WC (sans baignoire ni douche).
              </Typography>
            </div>
          }
          confirmText="Compris"
          onlyConfirm
          showCloseIcon
          iconType="knowledge"
        />

        <ModalMessage
          open={openModalSolaires}
          onClose={() => setOpenModalSolaires(false)}
          onConfirm={() => setOpenModalSolaires(false)}
          title="Panneaux solaires ‚Äî info"
          message={
            <Typography variant="body1">
              Cochez <strong>Oui</strong> si une installation photovolta√Øque ou solaire thermique
              est pr√©sente (toit, fa√ßade ou au sol). Si vous h√©sitez, laissez <em>Non</em> ou vide.
            </Typography>
          }
          confirmText="Compris"
          onlyConfirm
          showCloseIcon
          iconType="knowledge"
        />
      </div>
    </div>
  );
}
